// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    username      String?    @unique
    visibility    Visibility @default(public)
    description   String?
    image         String?
    message       Message[]
    accounts      Account[]
    sessions      Session[]
    user          UserRoom[] @relation("user")
    inviter       UserRoom[] @relation("inviter")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Visibility {
    public
    private
}

enum UserRoomRole {
    owner
    admin
    member
}

model Room {
    id          String     @id @default(cuid())
    name        String
    image       String?
    description String?
    visibility  Visibility @default(public)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    userRoom    UserRoom[]
    message     Message[]
}

model UserRoom {
    roomId    String
    room      Room         @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    user      User         @relation("user", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    inviterId String
    inviter   User         @relation("inviter", fields: [inviterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    role      UserRoomRole @default(member)
    confirmed Boolean      @default(false)

    @@id([roomId, userId])
}

model Message {
    id        String   @id @default(cuid())
    roomId    String
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
