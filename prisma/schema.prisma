// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    username      String?    @unique
    visibility    Visibility @default(public)
    description   String?
    image         String?
    aiTokens      Int        @default(0)
    message       Message[]
    accounts      Account[]
    sessions      Session[]
    userRoom      UserRoom[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Visibility {
    public
    private
}

enum UserRoomRole {
    admin
    member
}

enum RoomType {
    dm
    group
}

model Room {
    id          String     @id @default(cuid())
    name        String
    image       String?
    description String?
    inviteCode  String     @unique @default(cuid())
    type        RoomType   @default(group)
    visibility  Visibility @default(public)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    userRoom    UserRoom[]
    message     Message[]
}

model UserRoom {
    roomId String
    room   Room         @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String
    user   User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    role   UserRoomRole @default(member)

    @@id([roomId, userId])
    @@index([roomId])
    @@index([userId])
}

model Message {
    id        String   @id @default(cuid())
    roomId    String
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([roomId])
    @@index([userId])
}
